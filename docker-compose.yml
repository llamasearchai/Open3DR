version: '3.8'

services:
  # Main Open3D API Service
  open3d-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://open3d:open3d_password@postgres:5432/open3d
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./data:/data
      - ./models:/models
      - ./output:/output
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development version with hot reload
  open3d-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/1
      - DATABASE_URL=postgresql://open3d:open3d_password@postgres:5432/open3d_dev
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - .:/app
      - ./data:/data
      - ./models:/models
      - ./output:/output
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - dev

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=open3d
      - POSTGRES_USER=open3d
      - POSTGRES_PASSWORD=open3d_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U open3d"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A open3d.workers.celery worker --loglevel=info --concurrency=2
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://open3d:open3d_password@postgres:5432/open3d
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./data:/data
      - ./models:/models
      - ./output:/output
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A open3d.workers.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://open3d:open3d_password@postgres:5432/open3d
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Celery Flower for monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A open3d.workers.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    profiles:
      - monitoring

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    profiles:
      - monitoring

  # NVIDIA GPU monitoring
  nvidia-exporter:
    image: mindprobe/nvidia_gpu_prometheus_exporter:latest
    ports:
      - "9445:9445"
    volumes:
      - /usr/lib/x86_64-linux-gnu/libnvidia-ml.so:/usr/lib/x86_64-linux-gnu/libnvidia-ml.so
      - /usr/lib/x86_64-linux-gnu/libnvidia-ml.so.1:/usr/lib/x86_64-linux-gnu/libnvidia-ml.so.1
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    restart: unless-stopped
    profiles:
      - monitoring

  # Jupyter notebook for development and analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''
    ports:
      - "8888:8888"
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/1
      - DATABASE_URL=postgresql://open3d:open3d_password@postgres:5432/open3d_dev
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
      - ./data:/data
      - ./models:/models
      - ./output:/output
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - dev

  # Streamlit dashboard for visualization
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    command: streamlit run open3d/dashboard/app.py --server.port=8501 --server.address=0.0.0.0
    ports:
      - "8501:8501"
    environment:
      - ENVIRONMENT=development
      - API_BASE_URL=http://open3d-api:8000
    volumes:
      - .:/app
      - ./data:/data
      - ./output:/output
    depends_on:
      - open3d-api
    profiles:
      - dev

  # MinIO for object storage (development)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    profiles:
      - dev

  # Testing service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    command: pytest tests/ -v --cov=open3d --cov-report=html --cov-report=term-missing
    environment:
      - ENVIRONMENT=testing
      - REDIS_URL=redis://redis:6379/15
      - DATABASE_URL=postgresql://open3d:open3d_password@postgres:5432/open3d_test
    volumes:
      - .:/app
      - ./test-results:/app/test-results
    depends_on:
      - redis
      - postgres
    profiles:
      - test

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  minio_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 